name: Laravel CI

on:
  push:
    branches:
      - develop

jobs:
  ci:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel_api_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo, pdo_mysql, bcmath
          ini-values: post_max_size=256M, upload_max_filesize=256M
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Copy .env file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Wait for MySQL to be ready
        run: sudo apt-get install -y netcat && while ! nc -z localhost 3306; do sleep 1; done

      - name: Run database migrations
        run: php artisan migrate

      - name: Run tests
        run: php artisan test || true

      - name: Connect to VPS using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          passphrase: ${{ secrets.SERVER_PASSPHRASE }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd Projects/personal/laravel-ci-cd
            git checkout develop
            git pull
            echo "Start container"
            docker stop ${{ secrets.DOCKER_CONTAINER_NAME }} || true && docker rm ${{ secrets.DOCKER_CONTAINER_NAME }} || true
            DOPPLER_STAGING_TOKEN=${{ secrets.DOPPLER_STAGING_TOKEN }} docker compose -f docker/docker-compose.yaml up --build -d
            echo "Composer install"
            docker exec ${{ secrets.DOCKER_CONTAINER_NAME }} composer install --no-dev --no-progress --prefer-dist --optimize-autoloader
            echo "Run migrations"
            docker exec ${{ secrets.DOCKER_CONTAINER_NAME }} php artisan migrate
            echo "Optimize application"
            docker exec ${{ secrets.DOCKER_CONTAINER_NAME }} php artisan config:cache && php artisan route:cache && php artisan view:cache && php artisan optimize

